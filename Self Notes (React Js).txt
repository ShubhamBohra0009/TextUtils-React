React-js is a Javascript library but developers use it as a framework too
// reactjs.org   is the official website of reactjs for understanding the concepts

npm create-react-app // This will cause the installation on whole pc but we want some packages only for a specific project so for that reason npx is better 

npx create-react-app (~app_name) //This will create the react app with required name but there should be dash in the name as well for eg.
// npx create-react-app my-app // This creates react app with name my-app

cd my-app //to navigate/enter into the react app

npm start or npm run start  // is used for the development purpose 

npm run build // this is used to create a production build or this is the actual version that clients use

npm WARN provides us the warning about our react app

// Inside react-app

//inside react app there will be mainly *node_modules , *public folder, *src folder, *gitignore files, json files.
// We aren't going to make any changes in the modules or package Json as a beginner as it can cause the crash in react js app.
// We only provide package json to our client as the modules are heavy in size , and we can retirive our modules from the package.json as per requirement.
// public folder as the name suggest is open to the public so we can't put crucial files inside that folder
// src folder contains numerous files including customized components along with index.js and app.js
// most of the changes we need to do is inside the app.js 

// In react app we put everything inside one div with having id="root"
//index.js is the entry point // index.js me likha hai ki jahan par id= root hai vahan par app component ko dal do 

//Previously class based components were used but nowadays function based components are much more popular 

*// Understanding JSX

// JSX  can be understood as html+js , we can put js in in using { curly brackets}

// In jsx class is written as ClassName because class is a reserved keyword in js, 
// similiarily for is changed into htmlFor in react 
// Every attribute must have closing tag in jsx    eg. <img            />

// If we are using jsx in react then we can only return one element. for eg. in function app we can return only one element

 <> </> or jsx fragment is used in order to return more than one element  

// lorem34 is an abbrevation for getting 34 words of lorem ipsum
// Variables can be inserted into jsx with the help of curly brackets eg. {name} //this will insert the value of variable name

// Single Page Applications doesn't reload the page they just change the content dynamically using api's 

// For adding bootstrap with our react app we'll add the starter template of bootstrap in index.js of our react app
// And by the word adding bootstrap I meant not only css but also js 
// After that we can easily use bootstrap components in our app.js
// Some bootstrap elements doesn't contain closing tags so we'll have to manually add closing tag in them
// also change href="#" to href= "/"

// We can customize bootstrap components by editing it's code as per requirement

// export default d; // this will export const d but by default 
// now for eg. in some other file in order to import d we'll write for eg. import ui,{a,b,c} from './module.2mjs' //

// For not making our app.js clumsy we'll create components in src/components and then simply embedd them in our app.js

// Snippets

// rfc // reactFunctionalComponent // is a snippet used create react function based component
// impt //importPropTypes

// Props 
// props which means properties are used for changing elements with the change of page or basically we're passing values from app.js and it's getting accepted in the component
// for eg. we created navbar ones but for using it for different websites we need to change the title of navbar for every website
so we provide props in the app function and pass (props) in component function and 
{props.title} in the navbar component to change the title dynamically. if there are too many props then we can also group them into objects

//PropTypes
// For identifying the type of props 
// for eg. Navbar.propTypes = { 
    title: PropTypes.string,
        // title: PropTypes.string.isRequired, //We can use isRequired if we want to make a prop unchangeable
    aboutText : PropTypes.string
    }

// Default proptypes 

Navbar.defaultProps = {
    title : "Set title here",
    aboutText: "About Us"
}

// States
// State belong to a component for eg. we are having a variable x which is some text and it is going through a bunch of js functions so what we want is that as soon as the 
variable x changes the same should be reflected in all the functions instantly

//Hooks 
Hooks let us use state and other React features without writing a class. 
import React, {useState} from 'react'
// const [count, setCount] = useState(0);
//here count is a variable with having default value which is 0 given in the bracket and setCount will be the function
// that will be used for updating the value of count. 

//onChange is used to detect any change
// for eg. if we apply onChange on a textarea then whenever a change will occour in that textarea function declared in {} will be fired
// We also get a free event object along with it which we can use as event.target.value

// With bootstrap we can change the color and outline of a button with bootstrap ClassName 
btn-outline-success // for green
btn-outline-primary // for blue
btn-outline-danger // for red
Can prefer getbootstrap.com for further information 


